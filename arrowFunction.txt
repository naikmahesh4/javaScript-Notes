Arrow Function:-

Arrow functions – also called “fat arrow” functions, from CoffeeScript (a transcompiled language) — are a more concise syntax for writing function expressions. They utilize a new token, =>, that looks like a fat arrow. Arrow functions are anonymous and change the way this binds in functions.

app.js:-
---
const sayHello = function(){
	console.log('say Hello');
	}
sayHello();

const sayHello = () => { --)first here we don't need a function keyword,so parenthesis is empty and curly braces in between both we need to put a arrow which is an equal sign and a greater than sign.
 	console.log('hello')
	}
sayHello(); 
ouput: Hello

//One line function doesnot need braces
const  sayHello = () => console.log('hello);
sayHello();

//one line returns
const sayHello = () => 'hello' ;

//same as above with function
const sayHello = function(){
	return 'Hello' }

//return Object
const sayHello = () => ({ msg: 'hello'})  -> this ouputs undefined bcuz this looking for function body instead of an object literal. so to fix this all u have to wrap this in parenthesis and save,output will be {msg:hello}.
consolse.log(sayHello());

//single param does not need parenthesis
const sayHello  = name => console.log(`hello ${name}`);
sayHello('Brad');

//muliple params need Parenthesis
const sayHello = (firstName,lastName) => console.log(`hey ${firstName}${lastName}`);  --> with out params shows error 
sayHello('mahesh','naik');

//array of length for name	-> arrow function is also used for callback
const users = ['mahesh','veeresh','sravan']
const nameLength = users.map(function(name){ --> lets use map function
  return name.length;
});
console.log(nameLength);

we going to make little shorter by arrow function

const nameLength = user.map((name) => {
reuturn name.length});

and shortest by arrow function 

const nameLength = user.map(name => name.length);
-------------------------------------------------------------------

Custom HTTP Library (Fetch with promises):-

first one we use AJax .we use callback,we used S-5 prototypes i want to do is up game a little and use more modern technologies like fetch,ES6 Class,promoises.

easyHttp.js :-

class EasyHTTP {	--> we don't even need a constructor bcuz we're not we don't need the xhr object.
//Make an HTTP GET Request
	get(url){
	fetch(url)
	.then((res) => {res.json()})
	.then((data) =>{data})
	.catch((err) => {console.log(err)})
	}
  }

//when we use promises
    class EasyHTTP {
	get(url){
	      return new Promises(resolve,reject){
	fetch(url).then((res) => res.json()).then((data) => resolve.data)
	.catch((err) => reject.err)}
	}
//Make an HTTP POST Request
	post(url,data){
	return new Promises(resolve,reject){
	fetch(url ,{
	method:'POST',
	headers:{ 'Content-type' : 'application/json'},
	body: JSON.stringIfy(data) -> we're going to send data inn body and need to wrap it in JSON.stringIfy().
	})
	.then(res => res.json())
	.then(data =>resolve(data))
	.catch(err => reject(err));ss
	}
	}

	//Make an HTTP PUT Request
	put(url,data){
	return new Promises(resolve,reject){
	fetch(url ,{
	method:'PUT',
	headers:{ 'Content-type' : 'application/json'},
	body: JSON.stringIfy(data) -> we're going to send data inn body and need to wrap it in JSON.stringIfy().
	})
	.then(res => res.json())
	.then(data =>resolve(data))
	.catch(err => reject(err));ss
	}
	}
//Make an HTTP DELETE Request
	delete(url){ --> here don't required data 
	return new Promises(resolve,reject){
	fetch(url ,{
	method:'DELETE',
	headers:{ 'Content-type' : 'application/json'} -> here we don't need to body for deleting,as we're not sending the data.
	})
	.then(res => res.json())
	.then(data =>resolve('Deleted the User..')) -> for resolve we're not going to send back the data becuz it's goint to be an empty object , so am sending a string i.e Deleted the .
	.catch(err => reject(err));ss
	}
	}

	
}



app.js :-

const http = new EasyHttp;

//Get Users
/http.get('http://jsonplaceholder.typicode.com/users');
//when we uses Promises
const users = http.get('http://jsonplaceholder.typicode.com/users');
console.log(users);
   ->we want the data from promises the response so we don't do this way we do it in asynchronous

http.get('http://jsonplaceholder.typicode.com/users')
.then(data => console.log(data))
.catch(err => console.log(err))

-for Post method
//user Data 
const data = {
	name: 'john Doe',
	username: 'johndoe',
	email:'js.@gmail.com'
	}
//create user
http.post('http://jsonplaceholder.typicode.com/users',data)
.then(data => console.log(data))
.catch(err => console.log(err))

//Update user
http.put('http://jsonplaceholder.typicode.com/users/2',data)
.then(data => console.log(data))
.catch(err => console.log(err))

//Delete User
http.put('http://jsonplaceholder.typicode.com/users/2',data)
.then(data => console.log(data))
.catch(err => console.log(err))

------------------------------------------------------------------
Async & Await :-

Here is empty in index.html and app.js ,i want to create a function

app.js:-

function myFunc(){
return 'hello' ;
	}
console.log(myFunc()); 
output :-hello.

async function myFunc(){ -> with add a async to the beginning of the function and makes this function return a promise. 
return 'hello'; 

const promise = new Promise ((resolve,reject) => {
setTimeout(( ) => resolve('hello),1000)
});

const error = true;

if(!error){
	const res = await promise //wait untill the promise is resolved (untill it actually sends the response)
return res;
}else{

await Promise.reject( new Error('Something went wrong'))	}

 }
myFunc()
.then(res = > console.log(res)); -> here for a promise we have to use .then()which we use instand of wraping a new Promise ,we use async.
.catch(err => console.log(err))

Now something asynchronous within here and we can use await to actually wait until that's resolved.here i'm going to create a new Promise . |^

another example:-

async function getUsers(){ -> create a function getUsers with async that takes the promise.
	//await response of the fetch call
const response = await fetch('https://jsonplaceholder/typicode.com/users')

 //only proceed once its response
const data = await response.json(); -> create a varible data which where a wait we await the response and return the data.

 //only proceed once second promise is resolved
return data;  

}
getUsers().then(users => console.log(users)); 